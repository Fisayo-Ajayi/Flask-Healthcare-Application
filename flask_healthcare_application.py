# -*- coding: utf-8 -*-
"""Flask Healthcare Application.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XkW3IGn7ZJNmJfFnl7iZLmZzAtTKa1Qn
"""

!pip install flask
!pip install pymongo

from flask import Flask, render_template, request, redirect, url_for
from pymongo import MongoClient
import csv
import pandas as pd
import os

app = Flask(__name__)

# Connect to MongoDB Atlas
client = MongoClient("mongodb+srv://Fisayo:<Walexy1994>@cluster0.vxqlf.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0")
db = client["survey_db"]
collection = db["responses"]

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        if collection.count_documents({}) >= 10:
            return "Survey limit reached. Maximum of 10 users allowed."

        data = {
            "age": request.form['age'],
            "gender": request.form['gender'],
            "total_income": request.form['total_income'],
            "expenses": {
                "utilities": request.form.get('utilities', 0),
                "entertainment": request.form.get('entertainment', 0),
                "school_fees": request.form.get('school_fees', 0),
                "shopping": request.form.get('shopping', 0),
                "healthcare": request.form.get('healthcare', 0)
            }
        }
        collection.insert_one(data)
        return redirect(url_for('index'))
    return render_template('index.html')

@app.route('/export', methods=['GET'])
def export_data():
    data = list(collection.find({}, {"_id": 0}))
    df = pd.DataFrame(data)
    csv_file = "survey_data.csv"
    df.to_csv(csv_file, index=False)
    return f"Data exported to {csv_file}"

if __name__ == '__main__':
    app.run(debug=True)

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the survey data collected from MongoDB and exported as a CSV file.
# This data contains age, gender, total income, and various expense categories.
csv_file = "survey_data.csv"
df = pd.read_csv('survey_data.csv')

# Display basic dataset information
print("Dataset Overview:")
print(df.info())  # Shows column types and non-null values
print("\nStatistical Summary:")
print(df.describe())  # Provides a summary of numerical data

# Ensure necessary columns exist
expected_columns = ["age", "gender", "income", "utilities", "entertainment", "school_fees", "shopping", "healthcare"]
for col in expected_columns:
    if col not in df.columns:
        print(f"Warning: Column {col} is missing from the dataset.")

# Visualization 1: Identify age groups with the highest total income
plt.figure(figsize=(10,5))
sns.barplot(x=df["age"], y=df["income"], palette="coolwarm")
plt.xlabel("Age")
plt.ylabel("Income")
plt.title("Income Distribution by Age")
plt.xticks(rotation=45)  # Rotate x-axis labels for readability
plt.show()

# Visualization 2: Analyze gender-based spending trends across different expense categories
plt.figure(figsize=(10,5))
df_melted = df.melt(id_vars=["gender"], value_vars=["utilities", "entertainment", "school_fees", "shopping", "healthcare"],
                    var_name="Expense Category", value_name="Amount Spent")
sns.boxplot(x="Expense Category", y="Amount Spent", hue="gender", data=df_melted, palette="husl")
plt.xticks(rotation=45)
plt.title("Spending by Gender Across Categories")
plt.show()

# Save the generated visualizations as PNG files for the PowerPoint presentation
plt.savefig("income_by_age.png")
plt.savefig("spending_by_gender.png")

print("Survey data analysis completed successfully. Charts have been saved for presentation.")





